<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/tx
                     	http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
                        http://www.springframework.org/schema/aop
                     	http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/cache
                        http://www.springframework.org/schema/cache/spring-cache.xsd">
    <!-- 自动扫描 --><!-- 启用注释驱动自动注入的功能 -->
    <context:component-scan base-package="com.xinchen.mvc"/>

    <!--配置整合mybatis-->
    <!--配置数据库相关参数 properties属性：${url} -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--配置数据库连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--配置连接池属性-->
        <property name="driverClass" value="${driver}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!--c3p0连接池私有属性-->
        <property name="maxPoolSize" value="30"/>
        <property name="minPoolSize" value="10"/>
        <!--关闭后不自动commit 默认false-->
        <property name="autoCommitOnClose" value="false"/>
        <!--获取连接超时时间 默认0-->
        <property name="checkoutTimeout" value="2000"/>
        <!--当获取连接失败重试次数-->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>
    <!--约定大于配置-->
    <!-- 配置SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--配置MyBatis 全局配置文件: mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--扫描entity包 使用别名 org.seckill.entity.Seckill -> Seckill 多个包用;隔开-->
        <property name="typeAliasesPackage" value="com.xinchen.mvc.model;com.xinchen.mvc.dto"/>
        <!--扫描sql配置文件:mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!--分页插件-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!--定时任务-->
    <bean name="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
        <property name="applicationContextSchedulerContextKey" value="applicationContext"/>
        <property name="configLocation" value="classpath:quartz.properties"/>
        <!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
        <property name="overwriteExistingJobs" value="true"/>
        <!-- 设置自动启动 -->
        <property name="autoStartup" value="true"/>
        <property name="startupDelay" value="5"/>
        <property name="triggers">
            <list>
                <ref bean="demoJobTrigger"/>
            </list>
        </property>
    </bean>
    <bean id="demoJobDetail"
          class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="com.xinchen.mvc.core.job.OrderCheckJob"/>
        <property name="durability" value="true"/>
        <property name="description" value="testjob"/>
        <property name="jobDataAsMap">
            <map>
                <entry key="targetObject" value="OrderCheckJob"/>
                <entry key="targetMethod" value="execute"/>
            </map>
        </property>
    </bean>
    <bean id="demoJobTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="demoJobDetail"/>
        <!--<property name="cronExpression" value="0-0 0 0-23 * * ?"/>-->
        <property name="cronExpression" value="0-0 52 0-23 * * ?"/>
    </bean>

    <!--环境获取工具-->
    <bean class="com.xinchen.mvc.utils.ApplicationUtil">
    </bean>

    <!-- 自动扫描被@Aspect注解的bean-->
    <aop:aspectj-autoproxy/>

    <!--缓存ehcache-->
    <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:ehcache.xml"/>
    </bean>

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcache"/>
    </bean>
    <!-- 启用缓存注解开关 -->
    <cache:annotation-driven cache-manager="cacheManager"/>

    <!-- 事物管理-->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <aop:config>
        <aop:pointcut id="ServiceMethods"
                      expression="execution(* com.xinchen.mvc.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="ServiceMethods"/>
    </aop:config>
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="*" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>


    <!--配置扫描DAO接口包，动态实现DAO接口，并注入到spring容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入sqlSessionFactory  使用sqlSessionFactoryBeanName防止提前初始化sqlSessionFactory-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--给出需要扫描DAO接口包-->
        <property name="basePackage" value="com.xinchen.mvc.dao"/>
    </bean>
</beans>